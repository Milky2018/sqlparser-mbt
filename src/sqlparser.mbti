package "Milky2018/sqlparser"

// Values
fn lex(String) -> Array[Token] raise LexerError

fn parse(ArrayView[Token]) -> Array[Statement] raise ParserError

fn parse_sql(String) -> Statements raise SqlParserError

// Types and methods
pub enum BinaryOperator {
  Eq
  Neq
  Lt
  Gt
  LtEq
  GtEq
  Spaceship
  Plus
  Minus
  Mul
  Div
  Mod
  And
  Or
}
fn BinaryOperator::get_precedence(Self) -> Precedence
impl Eq for BinaryOperator
impl Show for BinaryOperator

pub struct CaseExpr {
  operand : Expr?
  when_then_clauses : Array[(Expr, Expr)]
  else_expr : Expr?
}
impl Eq for CaseExpr
impl Show for CaseExpr

pub struct ColumnDef {
  name : String
  data_type : DataType
  options : Array[ColumnDefOption]
}
impl Eq for ColumnDef

pub enum ColumnDefOption {
  NotNull
  Unique
  Default(Expr)
}
impl Eq for ColumnDefOption

pub struct CreateTableStmt {
  name : String
  columns : Array[ColumnDef]
  primary_key : String?
}
impl Eq for CreateTableStmt

type CreateViewStmt
impl Eq for CreateViewStmt

pub enum DataType {
  Integer
  Float(Int?)
  Real
  Double
  Char(Int)
  Varchar(Int)
  Text
  Boolean
  Timestamp
  Blob
}
impl Eq for DataType

pub enum DatetimeUnit {
  Year
  Month
  Day
  Hour
  Minute
  Second
}
impl Eq for DatetimeUnit
impl Show for DatetimeUnit

pub struct DropViewStmt {
  name : String
}
impl Eq for DropViewStmt

pub enum DuplicateTreatment {
  Distinct
  All
}
impl Eq for DuplicateTreatment

pub enum Expr {
  Identifier(String)
  CompoundIdentifier(Array[String])
  Literal(Literal)
  BinaryOperation(Expr, BinaryOperator, Expr)
  UnaryOperation(UnaryOperator, Expr)
  FunctionCall(String, DuplicateTreatment?, Array[Expr])
  Wildcard
  Datetime(String)
  Interval(String, IntervalQualifier)
  Like(positive~ : Bool, Expr, Expr)
  ILike(positive~ : Bool, Expr, Expr)
  SubQuery(SelectStmt)
  Exists(positive~ : Bool, SelectStmt)
  Between(positive~ : Bool, Expr, Expr, Expr)
  Extract(PrimaryDatetimeField, Expr)
  Case(CaseExpr)
  InList(positive~ : Bool, Expr, Array[Expr])
  InSubQuery(positive~ : Bool, Expr, SelectStmt)
  Substring(Expr, Expr?, Expr?)
}
impl Eq for Expr
impl Show for Expr

pub enum IntervalQualifier {
  Single(PrimaryDatetimeField)
  Range(PrimaryDatetimeField, PrimaryDatetimeField)
}
impl Eq for IntervalQualifier
impl Show for IntervalQualifier

pub struct Join {
  table_ref : TableRef
  join_operator : JoinOperator
}
impl Eq for Join
impl Show for Join

pub enum JoinConstraint {
  On(Expr)
  Using(Array[String])
  None
}
impl Eq for JoinConstraint
impl Show for JoinConstraint

pub enum JoinOperator {
  Join(JoinConstraint)
  Left(JoinConstraint)
  LeftOuter(JoinConstraint)
  Right(JoinConstraint)
  RightOuter(JoinConstraint)
  Full(JoinConstraint)
  FullOuter(JoinConstraint)
  Inner(JoinConstraint)
  Cross
}
impl Eq for JoinOperator
impl Show for JoinOperator

pub(all) enum Keyword {
  Select
  From
  Where
  As
  Group
  Order
  By
  Asc
  Desc
  Nulls
  First
  Last
  Year
  Month
  Day
  Hour
  Minute
  Second
  Date
  Interval
  To
  Like
  Not
  ILike
  Exists
  Between
  And
  Or
  Extract
  Case
  When
  Then
  Else
  Having
  End
  In
  Join
  Left
  Right
  Full
  Outer
  Inner
  Cross
  On
  Using
  Limit
  Offset
  Create
  Table
  Integer
  Int
  Smallint
  Bigint
  Real
  Double
  Precision
  Char
  Character
  Varchar
  Varing
  Text
  Time
  Boolean
  Float
  Timestamp
  Blob
  Null
  Default
  Unique
  View
  Drop
  Distinct
  All
  Substring
  For
}
impl Eq for Keyword
impl Show for Keyword

type LexerError
impl Show for LexerError

pub enum Literal {
  Integer(Int)
  Double(Double)
  String(String)
  Boolean(Bool)
  Null
}
impl Eq for Literal
impl Show for Literal

pub struct OrderByExpr {
  expr : Expr
  asc : Bool?
  nulls_first : Bool?
}
impl Eq for OrderByExpr
impl Show for OrderByExpr

type ParserError
impl Show for ParserError

pub(all) enum Precedence {
  PlusMinus
  MulDivMod
  Eq
  Like
  And
  Or
  Between
  UnaryNot
}
fn Precedence::value(Self) -> Int

type PrimaryDatetimeField
impl Eq for PrimaryDatetimeField
impl Show for PrimaryDatetimeField

pub enum Projection {
  Wildcard
  UnamedExpr(Expr)
  AliasedExpr(Expr, String)
}
impl Eq for Projection
impl Show for Projection

pub struct SelectStmt {
  projections : Array[Projection]
  from : Array[TableRef]
  where_clause : Expr?
  group_by : Array[Expr]
  having : Expr?
  order_by : Array[OrderByExpr]
  limit : Expr?
  offset : Expr?
}
impl Eq for SelectStmt
impl Show for SelectStmt

pub suberror SqlParserError {
  LexerError(LexerError)
  ParserError(ParserError)
}
impl Show for SqlParserError

pub enum Statement {
  Select(SelectStmt)
  CreateTable(CreateTableStmt)
  CreateView(CreateViewStmt)
  DropView(DropViewStmt)
}
impl Eq for Statement
impl Show for Statement

pub struct Statements {
  stmts : Array[Statement]
}
fn Statements::op_get(Self, Int) -> Statement
impl Show for Statements

pub struct TableAlias {
  name : String
  columns : Array[String]
}
impl Eq for TableAlias
impl Show for TableAlias

pub enum TableFactor {
  Column(String, TableAlias?)
  SubQuery(SelectStmt, TableAlias?)
}
impl Eq for TableFactor
impl Show for TableFactor

pub struct TableRef {
  factor : TableFactor
  joins : Array[Join]
}
impl Eq for TableRef
impl Show for TableRef

pub(all) enum Token {
  Keyword(Keyword)
  Identifier(String)
  Number(String)
  StringLiteral(String)
  Boolean(Bool)
  Comma
  Semicolon
  Eq
  DoubleEq
  Neq
  Lt
  Gt
  LtEq
  GtEq
  Spaceship
  Plus
  Minus
  Mul
  Div
  Mod
  LBracket
  RBracket
  LBrace
  RBrace
  LParen
  RParen
  Period
  Unknown(Char)
  Eof
}
impl Eq for Token
impl Show for Token

pub enum UnaryOperator {
  Plus
  Minus
  Not
}
impl Eq for UnaryOperator
impl Show for UnaryOperator

pub struct ViewColumnDef {
  name : String
}
impl Eq for ViewColumnDef

// Type aliases

// Traits

