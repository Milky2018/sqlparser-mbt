// Generated using `moon info`, DON'T EDIT IT
package "Milky2018/sqlparser"

import(
  "Yoorkin/prettyprinter"
)

// Values
fn lex(dialect? : &Dialect, String) -> Array[Token] raise LexerError

fn parse(dialect? : &Dialect, ArrayView[Token]) -> Array[Statement] raise ParserError

fn parse_sql(dialect? : &Dialect, String) -> Statements raise SqlParserError

fn[T : @prettyprinter.Pretty] pretty_print(T) -> String

fn[T : Show] structural_print(T) -> String

// Errors
type LexerError
impl Show for LexerError

type ParserError
impl Show for ParserError

pub suberror SqlParserError {
  LexerError(LexerError)
  ParserError(ParserError)
}
impl Show for SqlParserError

// Types and methods
pub enum BinaryOperator {
  Eq
  Neq
  Lt
  Gt
  LtEq
  GtEq
  Spaceship
  Plus
  Minus
  Mul
  Div
  Mod
  And
  Or
}
fn BinaryOperator::get_precedence(Self) -> Precedence
impl @prettyprinter.Pretty for BinaryOperator
impl Eq for BinaryOperator
impl Show for BinaryOperator

pub struct CaseExpr {
  operand : Expr?
  when_then_clauses : Array[(Expr, Expr)]
  else_expr : Expr?
}
impl @prettyprinter.Pretty for CaseExpr
impl Eq for CaseExpr
impl Show for CaseExpr

pub struct ColumnDef {
  name : String
  data_type : DataType
  options : Array[ColumnDefOption]
}
impl @prettyprinter.Pretty for ColumnDef
impl Eq for ColumnDef
impl Show for ColumnDef

pub enum ColumnDefOption {
  NotNull
  Unique
  Default(Expr)
  PrimaryKey
}
impl @prettyprinter.Pretty for ColumnDefOption
impl Eq for ColumnDefOption
impl Show for ColumnDefOption

pub struct CreateTableStmt {
  name : String
  columns : Array[ColumnDef]
  constraints : Array[TableConstraint]
}
impl @prettyprinter.Pretty for CreateTableStmt
impl Eq for CreateTableStmt
impl Show for CreateTableStmt

type CreateViewStmt
impl @prettyprinter.Pretty for CreateViewStmt
impl Eq for CreateViewStmt
impl Show for CreateViewStmt

pub enum DataType {
  Integer
  Smallint
  Bigint
  Float(Int?)
  Real
  Double
  Char(Int)
  Varchar(Int)
  Text
  Boolean
  Timestamp
  Blob
}
impl @prettyprinter.Pretty for DataType
impl Eq for DataType
impl Show for DataType

pub enum DatetimeUnit {
  Year
  Month
  Day
  Hour
  Minute
  Second
}
impl @prettyprinter.Pretty for DatetimeUnit
impl Eq for DatetimeUnit
impl Show for DatetimeUnit

pub struct DropViewStmt {
  name : String
}
impl @prettyprinter.Pretty for DropViewStmt
impl Eq for DropViewStmt
impl Show for DropViewStmt

pub enum DuplicateTreatment {
  Distinct
  All
}
impl @prettyprinter.Pretty for DuplicateTreatment
impl Eq for DuplicateTreatment
impl Show for DuplicateTreatment

pub enum Expr {
  Identifier(String)
  CompoundIdentifier(Array[String])
  Literal(Literal)
  BinaryOperation(Expr, BinaryOperator, Expr)
  UnaryOperation(UnaryOperator, Expr)
  FunctionCall(String, DuplicateTreatment?, Array[Expr])
  Wildcard
  Datetime(String)
  Interval(String, IntervalQualifier)
  Like(positive~ : Bool, Expr, Expr)
  ILike(positive~ : Bool, Expr, Expr)
  SubQuery(QueryStmt)
  Exists(positive~ : Bool, QueryStmt)
  Between(positive~ : Bool, Expr, Expr, Expr)
  Extract(PrimaryDatetimeField, Expr)
  Case(CaseExpr)
  InList(positive~ : Bool, Expr, Array[Expr])
  InSubQuery(positive~ : Bool, Expr, QueryStmt)
  Substring(Expr, Expr?, Expr?)
  PlaceHolder
}
impl @prettyprinter.Pretty for Expr
impl Eq for Expr
impl Show for Expr

pub enum IntervalQualifier {
  Single(PrimaryDatetimeField)
  Range(PrimaryDatetimeField, PrimaryDatetimeField)
}
impl @prettyprinter.Pretty for IntervalQualifier
impl Eq for IntervalQualifier
impl Show for IntervalQualifier

pub struct Join {
  table_ref : TableRef
  join_operator : JoinOperator
}
impl @prettyprinter.Pretty for Join
impl Eq for Join
impl Show for Join

pub enum JoinConstraint {
  On(Expr)
  Using(Array[String])
  None
}
impl @prettyprinter.Pretty for JoinConstraint
impl Eq for JoinConstraint
impl Show for JoinConstraint

pub enum JoinOperator {
  Join(JoinConstraint)
  Left(JoinConstraint)
  LeftOuter(JoinConstraint)
  Right(JoinConstraint)
  RightOuter(JoinConstraint)
  Full(JoinConstraint)
  FullOuter(JoinConstraint)
  Inner(JoinConstraint)
  Cross
}
impl @prettyprinter.Pretty for JoinOperator
impl Eq for JoinOperator
impl Show for JoinOperator

pub(all) enum Keyword {
  Select
  From
  Where
  As
  Group
  Order
  By
  Asc
  Desc
  Nulls
  First
  Last
  Year
  Month
  Day
  Hour
  Minute
  Second
  Date
  Interval
  To
  Like
  Not
  ILike
  Exists
  Between
  And
  Or
  Extract
  Case
  When
  Then
  Else
  Having
  End
  In
  Join
  Left
  Right
  Full
  Outer
  Inner
  Cross
  On
  Using
  Limit
  Offset
  Create
  Table
  Integer
  Int
  Smallint
  Bigint
  Real
  Double
  Precision
  Char
  Character
  Varchar
  Varing
  Text
  Time
  Boolean
  Float
  Timestamp
  Blob
  Null
  Default
  Unique
  View
  Drop
  Distinct
  All
  Substring
  For
  Primary
  Key
  Foreign
  References
  Check
  Union
  Intersect
  Except
  Top
}
impl Eq for Keyword
impl Show for Keyword

pub enum Literal {
  Integer(Int)
  Double(Double)
  String(String)
  Boolean(Bool)
  Null
}
impl @prettyprinter.Pretty for Literal
impl Eq for Literal
impl Show for Literal

pub struct MySQL {
}

pub struct ObjectName {
  parts : Array[String]
}
impl @prettyprinter.Pretty for ObjectName
impl Eq for ObjectName
impl Show for ObjectName

pub struct OrderByExpr {
  expr : Expr
  asc : Bool?
  nulls_first : Bool?
}
impl @prettyprinter.Pretty for OrderByExpr
impl Eq for OrderByExpr
impl Show for OrderByExpr

pub struct Postgres {
}

pub(all) enum Precedence {
  PlusMinus
  MulDivMod
  Eq
  Like
  And
  Or
  Between
  UnaryNot
}
fn Precedence::value(Self) -> Int

type PrimaryDatetimeField
impl @prettyprinter.Pretty for PrimaryDatetimeField
impl Eq for PrimaryDatetimeField
impl Show for PrimaryDatetimeField

pub enum Projection {
  Wildcard
  UnamedExpr(Expr)
  AliasedExpr(Expr, String)
}
impl @prettyprinter.Pretty for Projection
impl Eq for Projection
impl Show for Projection

pub struct QueryStmt {
  body : SetExpr
  order_by : Array[OrderByExpr]
  limit : Expr?
  offset : Expr?
}
impl @prettyprinter.Pretty for QueryStmt
impl Eq for QueryStmt
impl Show for QueryStmt

type SelectStmt
impl @prettyprinter.Pretty for SelectStmt
impl Eq for SelectStmt
impl Show for SelectStmt

type SetExpr
impl Eq for SetExpr
impl Show for SetExpr

type SetOperator
impl @prettyprinter.Pretty for SetOperator
impl Eq for SetOperator
impl Show for SetOperator

pub enum Statement {
  Query(QueryStmt)
  CreateTable(CreateTableStmt)
  CreateView(CreateViewStmt)
  DropView(DropViewStmt)
}
impl @prettyprinter.Pretty for Statement
impl Eq for Statement
impl Show for Statement

pub struct Statements {
  stmts : Array[Statement]
}
fn Statements::op_get(Self, Int) -> Statement
impl @prettyprinter.Pretty for Statements
impl Eq for Statements
impl Show for Statements

pub struct TableAlias {
  name : String
  columns : Array[String]
}
impl @prettyprinter.Pretty for TableAlias
impl Eq for TableAlias
impl Show for TableAlias

pub enum TableConstraint {
  Unique(Array[OrderByExpr])
  PrimaryKey(Array[OrderByExpr])
  ForeignKey(columns~ : Array[OrderByExpr], foreign_table~ : ObjectName, foreign_columns~ : Array[String])
  Check(Expr)
}
impl @prettyprinter.Pretty for TableConstraint
impl Eq for TableConstraint
impl Show for TableConstraint

pub enum TableFactor {
  Column(ObjectName, TableAlias?)
  SubQuery(QueryStmt, TableAlias?)
}
impl @prettyprinter.Pretty for TableFactor
impl Eq for TableFactor
impl Show for TableFactor

pub struct TableRef {
  factor : TableFactor
  joins : Array[Join]
}
impl @prettyprinter.Pretty for TableRef
impl Eq for TableRef
impl Show for TableRef

pub(all) enum Token {
  Keyword(Keyword)
  Identifier(String)
  Number(String)
  StringLiteral(String)
  Boolean(Bool)
  Comma
  Semicolon
  Eq
  DoubleEq
  Neq
  Lt
  Gt
  LtEq
  GtEq
  Spaceship
  Plus
  Minus
  Mul
  Div
  Mod
  LBracket
  RBracket
  LBrace
  RBrace
  LParen
  RParen
  Period
  PlaceHolder
  Unknown(Char)
  Eof
}
impl Eq for Token
impl Show for Token

pub enum Top {
  Constant(Int)
  Expr(Expr)
}
impl @prettyprinter.Pretty for Top
impl Eq for Top
impl Show for Top

pub enum UnaryOperator {
  Plus
  Minus
  Not
}
impl @prettyprinter.Pretty for UnaryOperator
impl Eq for UnaryOperator
impl Show for UnaryOperator

pub struct ViewColumnDef {
  name : String
}
impl @prettyprinter.Pretty for ViewColumnDef
impl Eq for ViewColumnDef
impl Show for ViewColumnDef

// Type aliases

// Traits
pub trait Dialect {
  supports_string_literal_backslash_escape(Self) -> Bool
  supports_boolean_literals(Self) -> Bool
  parse_expr(Self, ArrayView[Token]) -> (Expr, ArrayView[Token])? raise ParserError
}

