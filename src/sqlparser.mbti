package "Milky2018/sqlparser"

// Values
fn parse_sql(String) -> Statements raise SqlParserError

// Types and methods
pub enum BinaryOperator {
  Eq
  Neq
  Lt
  Gt
  LtEq
  GtEq
  Spaceship
  Plus
  Minus
  Mul
  Div
  Mod
  And
  Or
}
fn BinaryOperator::get_precedence(Self) -> Precedence
impl Eq for BinaryOperator
impl Show for BinaryOperator

pub struct CaseExpr {
  operand : Expr?
  when_then_clauses : Array[(Expr, Expr)]
  else_expr : Expr?
}
impl Eq for CaseExpr
impl Show for CaseExpr

pub enum DatetimeUnit {
  Year
  Month
  Day
  Hour
  Minute
  Second
}
impl Eq for DatetimeUnit
impl Show for DatetimeUnit

pub enum Expr {
  Identifier(String)
  CompoundIdentifier(Array[String])
  Literal(Literal)
  BinaryOperation(Expr, BinaryOperator, Expr)
  UnaryOperation(UnaryOperator, Expr)
  FunctionCall(String, Array[Expr])
  Wildcard
  Datetime(String)
  Interval(String, IntervalQualifier)
  Like(positive~ : Bool, Expr, Expr)
  ILike(positive~ : Bool, Expr, Expr)
  SubQuery(SelectStmt)
  Exists(positive~ : Bool, SelectStmt)
  Between(positive~ : Bool, Expr, Expr, Expr)
  Extract(PrimaryDatetimeField, Expr)
  Case(CaseExpr)
  InList(positive~ : Bool, Expr, Array[Expr])
  InSubQuery(positive~ : Bool, Expr, SelectStmt)
}
impl Eq for Expr
impl Show for Expr

pub enum IntervalQualifier {
  Single(PrimaryDatetimeField)
  Range(PrimaryDatetimeField, PrimaryDatetimeField)
}
impl Eq for IntervalQualifier
impl Show for IntervalQualifier

pub struct Join {
  table_ref : TableRef
  join_operator : JoinOperator
}
impl Eq for Join
impl Show for Join

pub enum JoinConstraint {
  On(Expr)
  Using(Array[String])
  None
}
impl Eq for JoinConstraint
impl Show for JoinConstraint

pub enum JoinOperator {
  Join(JoinConstraint)
  Left(JoinConstraint)
  LeftOuter(JoinConstraint)
  Right(JoinConstraint)
  RightOuter(JoinConstraint)
  Full(JoinConstraint)
  FullOuter(JoinConstraint)
  Inner(JoinConstraint)
  Cross
}
impl Eq for JoinOperator
impl Show for JoinOperator

pub(all) enum Keyword {
  Select
  From
  Where
  As
  Group
  Order
  By
  Asc
  Desc
  Nulls
  First
  Last
  Year
  Month
  Day
  Hour
  Minute
  Second
  Date
  Interval
  To
  Like
  Not
  ILike
  Exists
  Between
  And
  Or
  Extract
  Case
  When
  Then
  Else
  Having
  End
  In
  Join
  Left
  Right
  Full
  Outer
  Inner
  Cross
  On
  Using
  Limit
  Offset
}
impl Eq for Keyword
impl Show for Keyword

type Lexer
fn Lexer::lex(Self) -> Array[Token] raise LexerError
fn Lexer::new(String) -> Self

type LexerError
impl Show for LexerError

pub enum Literal {
  Integer(Int)
  Double(Double)
  String(String)
  Boolean(Bool)
  Null
}
impl Eq for Literal
impl Show for Literal

pub struct OrderByExpr {
  expr : Expr
  asc : Bool?
  nulls_first : Bool?
}
impl Eq for OrderByExpr
impl Show for OrderByExpr

pub struct Parser {
  input : Array[Token]
  mut offset : Int
}
fn Parser::new(Array[Token]) -> Self
fn Parser::parse(Self) -> Array[Statement] raise ParserError

type ParserError
impl Show for ParserError

pub(all) enum Precedence {
  PlusMinus
  MulDivMod
  Eq
  Like
  And
  Or
  Between
  UnaryNot
}
fn Precedence::value(Self) -> Int

type PrimaryDatetimeField
impl Eq for PrimaryDatetimeField
impl Show for PrimaryDatetimeField

pub enum Projection {
  Wildcard
  UnamedExpr(Expr)
  AliasedExpr(Expr, String)
}
impl Eq for Projection
impl Show for Projection

pub struct SelectStmt {
  projections : Array[Projection]
  from : Array[TableRef]
  where_clause : Expr?
  group_by : Array[Expr]
  having : Expr?
  order_by : Array[OrderByExpr]
  limit : Expr?
  offset : Expr?
}
impl Eq for SelectStmt
impl Show for SelectStmt

pub suberror SqlParserError {
  LexerError(LexerError)
  ParserError(ParserError)
}
impl Show for SqlParserError

pub enum Statement {
  Select(SelectStmt)
}
impl Eq for Statement
impl Show for Statement

pub struct Statements {
  stmts : Array[Statement]
}
fn Statements::op_get(Self, Int) -> Statement
impl Show for Statements

pub struct TableAlias {
  name : String
  columns : Array[String]
}
impl Eq for TableAlias
impl Show for TableAlias

pub enum TableFactor {
  Column(String, TableAlias?)
  SubQuery(SelectStmt, TableAlias?)
}
impl Eq for TableFactor
impl Show for TableFactor

pub struct TableRef {
  factor : TableFactor
  joins : Array[Join]
}
impl Eq for TableRef
impl Show for TableRef

pub(all) enum Token {
  Keyword(Keyword)
  Identifier(String)
  Number(String)
  StringLiteral(String)
  Boolean(Bool)
  Null
  Comma
  Semicolon
  Eq
  DoubleEq
  Neq
  Lt
  Gt
  LtEq
  GtEq
  Spaceship
  Plus
  Minus
  Mul
  Div
  Mod
  LBracket
  RBracket
  LBrace
  RBrace
  LParen
  RParen
  Period
  Unknown(Char)
  Eof
}
impl Eq for Token
impl Show for Token

pub enum UnaryOperator {
  Plus
  Minus
  Not
}
impl Eq for UnaryOperator
impl Show for UnaryOperator

// Type aliases

// Traits

